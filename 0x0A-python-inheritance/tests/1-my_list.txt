=========================
Usage 1-my_list.py
=========================

Defines an inherited list class MyList.

Usage
=====

```1-my_list``` implements sorted printing for a list.

import:
    >>> MyList = __import__('1-my_list').MyList

Empty list:
    >>> my_list1 = MyList([])
    >>> my_list1.print_sorted()
    []

Correct Class Type:
    >>> my_list1 = MyList()
    >>> type(my_list1) == MyList
    True

Correct Instance:
    >>> my_list1 = MyList()
    >>> isinstance(my_list1, list)
    True

print_sorted method type:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> my_list1.print_sorted([3, 1, 4])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> my_list1.print_sorted([5, 2, 6], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

----------------------------------------------------------------

Normal list:
    >>> my_list1 = MyList([9, 8, 7])
    >>> my_list1.print_sorted()
    [7, 8, 9]

Longer list:
    >>> my_list1 = MyList([6, 5, 4, 3, 2])
    >>> my_list1.print_sorted()
    [2, 3, 4, 5, 6]

Negative ints list:
    >>> my_list1 = MyList([-50, -30, -20, -10])
    >>> my_list1.print_sorted()
    [-50, -30, -20, -10]

Original list:
    >>> my_list1 = MyList([9, 8, 7, 6, 5, 4, 3])
    >>> my_list1.print_sorted()
    [3, 4, 5, 6, 7, 8, 9]
    >>> my_list1
    [9, 8, 7, 6, 5, 4, 3]

Preordered list:
    >>> my_list1 = MyList([-50, -30, -20, -10])
    >>> my_list1.print_sorted()
    [-50, -30, -20, -10]

Append fct:
    >>> my_list1 = MyList()
    >>> my_list1.append(7)
    >>> my_list1
    [7]

